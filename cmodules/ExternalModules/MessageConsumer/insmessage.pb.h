// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: insmessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_insmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_insmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_insmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_insmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_insmessage_2eproto;
namespace raven {
namespace fcu {
namespace swicd {
class RavenFCU_SWICD_INSmessage;
class RavenFCU_SWICD_INSmessageDefaultTypeInternal;
extern RavenFCU_SWICD_INSmessageDefaultTypeInternal _RavenFCU_SWICD_INSmessage_default_instance_;
}  // namespace swicd
}  // namespace fcu
}  // namespace raven
PROTOBUF_NAMESPACE_OPEN
template<> ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage* Arena::CreateMaybeMessage<::raven::fcu::swicd::RavenFCU_SWICD_INSmessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raven {
namespace fcu {
namespace swicd {

enum RavenFCU_SWICD_INSmessage_FixType : int {
  RavenFCU_SWICD_INSmessage_FixType_GPS_NO_FIX = 0,
  RavenFCU_SWICD_INSmessage_FixType_GPS_DEAD_RECKONING = 1,
  RavenFCU_SWICD_INSmessage_FixType_GPS_2D = 2,
  RavenFCU_SWICD_INSmessage_FixType_GPS_3D = 3,
  RavenFCU_SWICD_INSmessage_FixType_GPS_GNSS_DEAD_RECK = 4,
  RavenFCU_SWICD_INSmessage_FixType_GPS_TIME_ONLY = 5,
  RavenFCU_SWICD_INSmessage_FixType_RavenFCU_SWICD_INSmessage_FixType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RavenFCU_SWICD_INSmessage_FixType_RavenFCU_SWICD_INSmessage_FixType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RavenFCU_SWICD_INSmessage_FixType_IsValid(int value);
constexpr RavenFCU_SWICD_INSmessage_FixType RavenFCU_SWICD_INSmessage_FixType_FixType_MIN = RavenFCU_SWICD_INSmessage_FixType_GPS_NO_FIX;
constexpr RavenFCU_SWICD_INSmessage_FixType RavenFCU_SWICD_INSmessage_FixType_FixType_MAX = RavenFCU_SWICD_INSmessage_FixType_GPS_TIME_ONLY;
constexpr int RavenFCU_SWICD_INSmessage_FixType_FixType_ARRAYSIZE = RavenFCU_SWICD_INSmessage_FixType_FixType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RavenFCU_SWICD_INSmessage_FixType_descriptor();
template<typename T>
inline const std::string& RavenFCU_SWICD_INSmessage_FixType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RavenFCU_SWICD_INSmessage_FixType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RavenFCU_SWICD_INSmessage_FixType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RavenFCU_SWICD_INSmessage_FixType_descriptor(), enum_t_value);
}
inline bool RavenFCU_SWICD_INSmessage_FixType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RavenFCU_SWICD_INSmessage_FixType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RavenFCU_SWICD_INSmessage_FixType>(
    RavenFCU_SWICD_INSmessage_FixType_descriptor(), name, value);
}
// ===================================================================

class RavenFCU_SWICD_INSmessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raven.fcu.swicd.RavenFCU_SWICD_INSmessage) */ {
 public:
  inline RavenFCU_SWICD_INSmessage() : RavenFCU_SWICD_INSmessage(nullptr) {}
  virtual ~RavenFCU_SWICD_INSmessage();

  RavenFCU_SWICD_INSmessage(const RavenFCU_SWICD_INSmessage& from);
  RavenFCU_SWICD_INSmessage(RavenFCU_SWICD_INSmessage&& from) noexcept
    : RavenFCU_SWICD_INSmessage() {
    *this = ::std::move(from);
  }

  inline RavenFCU_SWICD_INSmessage& operator=(const RavenFCU_SWICD_INSmessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RavenFCU_SWICD_INSmessage& operator=(RavenFCU_SWICD_INSmessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RavenFCU_SWICD_INSmessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RavenFCU_SWICD_INSmessage* internal_default_instance() {
    return reinterpret_cast<const RavenFCU_SWICD_INSmessage*>(
               &_RavenFCU_SWICD_INSmessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RavenFCU_SWICD_INSmessage& a, RavenFCU_SWICD_INSmessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RavenFCU_SWICD_INSmessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RavenFCU_SWICD_INSmessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RavenFCU_SWICD_INSmessage* New() const final {
    return CreateMaybeMessage<RavenFCU_SWICD_INSmessage>(nullptr);
  }

  RavenFCU_SWICD_INSmessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RavenFCU_SWICD_INSmessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RavenFCU_SWICD_INSmessage& from);
  void MergeFrom(const RavenFCU_SWICD_INSmessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RavenFCU_SWICD_INSmessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raven.fcu.swicd.RavenFCU_SWICD_INSmessage";
  }
  protected:
  explicit RavenFCU_SWICD_INSmessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_insmessage_2eproto);
    return ::descriptor_table_insmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RavenFCU_SWICD_INSmessage_FixType FixType;
  static constexpr FixType GPS_NO_FIX =
    RavenFCU_SWICD_INSmessage_FixType_GPS_NO_FIX;
  static constexpr FixType GPS_DEAD_RECKONING =
    RavenFCU_SWICD_INSmessage_FixType_GPS_DEAD_RECKONING;
  static constexpr FixType GPS_2D =
    RavenFCU_SWICD_INSmessage_FixType_GPS_2D;
  static constexpr FixType GPS_3D =
    RavenFCU_SWICD_INSmessage_FixType_GPS_3D;
  static constexpr FixType GPS_GNSS_DEAD_RECK =
    RavenFCU_SWICD_INSmessage_FixType_GPS_GNSS_DEAD_RECK;
  static constexpr FixType GPS_TIME_ONLY =
    RavenFCU_SWICD_INSmessage_FixType_GPS_TIME_ONLY;
  static inline bool FixType_IsValid(int value) {
    return RavenFCU_SWICD_INSmessage_FixType_IsValid(value);
  }
  static constexpr FixType FixType_MIN =
    RavenFCU_SWICD_INSmessage_FixType_FixType_MIN;
  static constexpr FixType FixType_MAX =
    RavenFCU_SWICD_INSmessage_FixType_FixType_MAX;
  static constexpr int FixType_ARRAYSIZE =
    RavenFCU_SWICD_INSmessage_FixType_FixType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FixType_descriptor() {
    return RavenFCU_SWICD_INSmessage_FixType_descriptor();
  }
  template<typename T>
  static inline const std::string& FixType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FixType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FixType_Name.");
    return RavenFCU_SWICD_INSmessage_FixType_Name(enum_t_value);
  }
  static inline bool FixType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FixType* value) {
    return RavenFCU_SWICD_INSmessage_FixType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kAltitudeFieldNumber = 4,
    kRollFieldNumber = 5,
    kPitchFieldNumber = 6,
    kYawFieldNumber = 7,
    kAccelXFieldNumber = 8,
    kAccelYFieldNumber = 9,
    kAccelZFieldNumber = 10,
    kBarometerFieldNumber = 11,
    kCourseFieldNumber = 12,
    kSpeedFieldNumber = 13,
    kVelocityNFieldNumber = 14,
    kVelocityEFieldNumber = 15,
    kVelocityDFieldNumber = 16,
    kNumSatsFieldNumber = 17,
    kDeclinationFieldNumber = 18,
    kGpsFixFieldNumber = 19,
  };
  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double altitude = 4;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // float roll = 5;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float pitch = 6;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 7;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float accel_x = 8;
  void clear_accel_x();
  float accel_x() const;
  void set_accel_x(float value);
  private:
  float _internal_accel_x() const;
  void _internal_set_accel_x(float value);
  public:

  // float accel_y = 9;
  void clear_accel_y();
  float accel_y() const;
  void set_accel_y(float value);
  private:
  float _internal_accel_y() const;
  void _internal_set_accel_y(float value);
  public:

  // float accel_z = 10;
  void clear_accel_z();
  float accel_z() const;
  void set_accel_z(float value);
  private:
  float _internal_accel_z() const;
  void _internal_set_accel_z(float value);
  public:

  // float barometer = 11;
  void clear_barometer();
  float barometer() const;
  void set_barometer(float value);
  private:
  float _internal_barometer() const;
  void _internal_set_barometer(float value);
  public:

  // float course = 12;
  void clear_course();
  float course() const;
  void set_course(float value);
  private:
  float _internal_course() const;
  void _internal_set_course(float value);
  public:

  // float speed = 13;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float velocityN = 14;
  void clear_velocityn();
  float velocityn() const;
  void set_velocityn(float value);
  private:
  float _internal_velocityn() const;
  void _internal_set_velocityn(float value);
  public:

  // float velocityE = 15;
  void clear_velocitye();
  float velocitye() const;
  void set_velocitye(float value);
  private:
  float _internal_velocitye() const;
  void _internal_set_velocitye(float value);
  public:

  // float velocityD = 16;
  void clear_velocityd();
  float velocityd() const;
  void set_velocityd(float value);
  private:
  float _internal_velocityd() const;
  void _internal_set_velocityd(float value);
  public:

  // int32 numSats = 17;
  void clear_numsats();
  ::PROTOBUF_NAMESPACE_ID::int32 numsats() const;
  void set_numsats(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numsats() const;
  void _internal_set_numsats(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float declination = 18;
  void clear_declination();
  float declination() const;
  void set_declination(float value);
  private:
  float _internal_declination() const;
  void _internal_set_declination(float value);
  public:

  // .raven.fcu.swicd.RavenFCU_SWICD_INSmessage.FixType gpsFix = 19;
  void clear_gpsfix();
  ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType gpsfix() const;
  void set_gpsfix(::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType value);
  private:
  ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType _internal_gpsfix() const;
  void _internal_set_gpsfix(::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType value);
  public:

  // @@protoc_insertion_point(class_scope:raven.fcu.swicd.RavenFCU_SWICD_INSmessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double timestamp_;
  double latitude_;
  double longitude_;
  double altitude_;
  float roll_;
  float pitch_;
  float yaw_;
  float accel_x_;
  float accel_y_;
  float accel_z_;
  float barometer_;
  float course_;
  float speed_;
  float velocityn_;
  float velocitye_;
  float velocityd_;
  ::PROTOBUF_NAMESPACE_ID::int32 numsats_;
  float declination_;
  int gpsfix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_insmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RavenFCU_SWICD_INSmessage

// double timestamp = 1;
inline void RavenFCU_SWICD_INSmessage::clear_timestamp() {
  timestamp_ = 0;
}
inline double RavenFCU_SWICD_INSmessage::_internal_timestamp() const {
  return timestamp_;
}
inline double RavenFCU_SWICD_INSmessage::timestamp() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.timestamp)
  return _internal_timestamp();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.timestamp)
}

// double latitude = 2;
inline void RavenFCU_SWICD_INSmessage::clear_latitude() {
  latitude_ = 0;
}
inline double RavenFCU_SWICD_INSmessage::_internal_latitude() const {
  return latitude_;
}
inline double RavenFCU_SWICD_INSmessage::latitude() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.latitude)
  return _internal_latitude();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.latitude)
}

// double longitude = 3;
inline void RavenFCU_SWICD_INSmessage::clear_longitude() {
  longitude_ = 0;
}
inline double RavenFCU_SWICD_INSmessage::_internal_longitude() const {
  return longitude_;
}
inline double RavenFCU_SWICD_INSmessage::longitude() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.longitude)
  return _internal_longitude();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.longitude)
}

// double altitude = 4;
inline void RavenFCU_SWICD_INSmessage::clear_altitude() {
  altitude_ = 0;
}
inline double RavenFCU_SWICD_INSmessage::_internal_altitude() const {
  return altitude_;
}
inline double RavenFCU_SWICD_INSmessage::altitude() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.altitude)
  return _internal_altitude();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.altitude)
}

// float roll = 5;
inline void RavenFCU_SWICD_INSmessage::clear_roll() {
  roll_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_roll() const {
  return roll_;
}
inline float RavenFCU_SWICD_INSmessage::roll() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.roll)
  return _internal_roll();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.roll)
}

// float pitch = 6;
inline void RavenFCU_SWICD_INSmessage::clear_pitch() {
  pitch_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_pitch() const {
  return pitch_;
}
inline float RavenFCU_SWICD_INSmessage::pitch() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.pitch)
  return _internal_pitch();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.pitch)
}

// float yaw = 7;
inline void RavenFCU_SWICD_INSmessage::clear_yaw() {
  yaw_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_yaw() const {
  return yaw_;
}
inline float RavenFCU_SWICD_INSmessage::yaw() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.yaw)
  return _internal_yaw();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.yaw)
}

// float accel_x = 8;
inline void RavenFCU_SWICD_INSmessage::clear_accel_x() {
  accel_x_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_accel_x() const {
  return accel_x_;
}
inline float RavenFCU_SWICD_INSmessage::accel_x() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.accel_x)
  return _internal_accel_x();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_accel_x(float value) {
  
  accel_x_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_accel_x(float value) {
  _internal_set_accel_x(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.accel_x)
}

// float accel_y = 9;
inline void RavenFCU_SWICD_INSmessage::clear_accel_y() {
  accel_y_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_accel_y() const {
  return accel_y_;
}
inline float RavenFCU_SWICD_INSmessage::accel_y() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.accel_y)
  return _internal_accel_y();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_accel_y(float value) {
  
  accel_y_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_accel_y(float value) {
  _internal_set_accel_y(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.accel_y)
}

// float accel_z = 10;
inline void RavenFCU_SWICD_INSmessage::clear_accel_z() {
  accel_z_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_accel_z() const {
  return accel_z_;
}
inline float RavenFCU_SWICD_INSmessage::accel_z() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.accel_z)
  return _internal_accel_z();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_accel_z(float value) {
  
  accel_z_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_accel_z(float value) {
  _internal_set_accel_z(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.accel_z)
}

// float barometer = 11;
inline void RavenFCU_SWICD_INSmessage::clear_barometer() {
  barometer_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_barometer() const {
  return barometer_;
}
inline float RavenFCU_SWICD_INSmessage::barometer() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.barometer)
  return _internal_barometer();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_barometer(float value) {
  
  barometer_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_barometer(float value) {
  _internal_set_barometer(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.barometer)
}

// float course = 12;
inline void RavenFCU_SWICD_INSmessage::clear_course() {
  course_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_course() const {
  return course_;
}
inline float RavenFCU_SWICD_INSmessage::course() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.course)
  return _internal_course();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_course(float value) {
  
  course_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_course(float value) {
  _internal_set_course(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.course)
}

// float speed = 13;
inline void RavenFCU_SWICD_INSmessage::clear_speed() {
  speed_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_speed() const {
  return speed_;
}
inline float RavenFCU_SWICD_INSmessage::speed() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.speed)
  return _internal_speed();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.speed)
}

// float velocityN = 14;
inline void RavenFCU_SWICD_INSmessage::clear_velocityn() {
  velocityn_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_velocityn() const {
  return velocityn_;
}
inline float RavenFCU_SWICD_INSmessage::velocityn() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.velocityN)
  return _internal_velocityn();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_velocityn(float value) {
  
  velocityn_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_velocityn(float value) {
  _internal_set_velocityn(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.velocityN)
}

// float velocityE = 15;
inline void RavenFCU_SWICD_INSmessage::clear_velocitye() {
  velocitye_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_velocitye() const {
  return velocitye_;
}
inline float RavenFCU_SWICD_INSmessage::velocitye() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.velocityE)
  return _internal_velocitye();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_velocitye(float value) {
  
  velocitye_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_velocitye(float value) {
  _internal_set_velocitye(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.velocityE)
}

// float velocityD = 16;
inline void RavenFCU_SWICD_INSmessage::clear_velocityd() {
  velocityd_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_velocityd() const {
  return velocityd_;
}
inline float RavenFCU_SWICD_INSmessage::velocityd() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.velocityD)
  return _internal_velocityd();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_velocityd(float value) {
  
  velocityd_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_velocityd(float value) {
  _internal_set_velocityd(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.velocityD)
}

// int32 numSats = 17;
inline void RavenFCU_SWICD_INSmessage::clear_numsats() {
  numsats_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RavenFCU_SWICD_INSmessage::_internal_numsats() const {
  return numsats_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RavenFCU_SWICD_INSmessage::numsats() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.numSats)
  return _internal_numsats();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_numsats(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numsats_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_numsats(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numsats(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.numSats)
}

// float declination = 18;
inline void RavenFCU_SWICD_INSmessage::clear_declination() {
  declination_ = 0;
}
inline float RavenFCU_SWICD_INSmessage::_internal_declination() const {
  return declination_;
}
inline float RavenFCU_SWICD_INSmessage::declination() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.declination)
  return _internal_declination();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_declination(float value) {
  
  declination_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_declination(float value) {
  _internal_set_declination(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.declination)
}

// .raven.fcu.swicd.RavenFCU_SWICD_INSmessage.FixType gpsFix = 19;
inline void RavenFCU_SWICD_INSmessage::clear_gpsfix() {
  gpsfix_ = 0;
}
inline ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType RavenFCU_SWICD_INSmessage::_internal_gpsfix() const {
  return static_cast< ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType >(gpsfix_);
}
inline ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType RavenFCU_SWICD_INSmessage::gpsfix() const {
  // @@protoc_insertion_point(field_get:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.gpsFix)
  return _internal_gpsfix();
}
inline void RavenFCU_SWICD_INSmessage::_internal_set_gpsfix(::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType value) {
  
  gpsfix_ = value;
}
inline void RavenFCU_SWICD_INSmessage::set_gpsfix(::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType value) {
  _internal_set_gpsfix(value);
  // @@protoc_insertion_point(field_set:raven.fcu.swicd.RavenFCU_SWICD_INSmessage.gpsFix)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace swicd
}  // namespace fcu
}  // namespace raven

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType>() {
  return ::raven::fcu::swicd::RavenFCU_SWICD_INSmessage_FixType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_insmessage_2eproto
